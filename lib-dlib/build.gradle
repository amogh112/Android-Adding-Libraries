apply plugin: "com.android.library"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Some annotation processors (such as AutoFactory) rely on precise types in
// declaration signatures. By default, Kapt replaces every unknown type
// (including types for the generated classes) to NonExistentClass, but you
// can change this behavior. Add the additional flag to the build.gradle file
// to enable error type inferring in stubs:
kapt {
    correctErrorTypes = true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            // Options: 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            abiFilters 'armeabi-v7a'
        }
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_PLATFORM=android-16",
                          "-DANDROID_TOOLCHAIN=clang",
                          "-DANDROID_STL=c++_shared",
                          "-DANDROID_CPP_FEATURES=rtti exceptions"
                // Enables exception-handling support.
//                cppFlags "-fexceptions -std=c++11"
            }
        }
    }

    // Let gradle pack the shared library into apk.
    sourceSets {
        main {
            jniLibs.srcDirs = ["src/main/cppLibs/dlib/lib",
                               "src/main/cppLibs/protobuf/lib"]
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    // Pick first STL shared library if there're duplicate files in the
    // dependent module.
    packagingOptions {
        pickFirst "**/libc++_shared.so"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

repositories {
    // Find the AAR files in the libs folder.
    flatDir { dirs "libs" }
}

dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])

    testImplementation rootProject.ext.dep.testJunit
}
